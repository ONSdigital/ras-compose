version: '2'
services:
  # Our frontstage machine which is responsible for delivering the correct Electronic Questionarie (EQ)
  ras-frontstage:
    build: ${RAS_HOME}/ras-frontstage
    ports:
      - "5101:5001"
    environment:
      - OAUTHLIB_INSECURE_TRANSPORT=1                           # Used for development. Allows OAuth2 protocol to work over non TLS protocol
      - APP_SETTINGS=config.Config                              # Allows Flask to load config files
      - ONS_OAUTH_SERVER=django-oauth2-test:8040                # Tells ras-frontstage how to find the django OAuth2 server
      - RAS_FRONTSTAGE_CLIENT_ID=ons@ons.gov                    # Configures a Client ID for ras-frontstage see: https://www.oauth.com/oauth2-servers/client-registration/client-id-secret/
      - RAS_FRONTSTAGE_CLIENT_SECRET=password                   # Configures a Client secret for ras-frontstage see above URL
      - ONS_AUTHORIZATION_ENDPOINT=/web/authorize/              # Configures an authorisation endpoint see: https://www.oauth.com/oauth2-servers/authorization/
      - ONS_TOKEN_ENDPOINT=/api/v1/tokens/                      # Configures a token endpoint see:  https://www.oauth.com/oauth2-servers/access-tokens/
      - ONS_ADMIN_ENDPOINT=/api/account/create                  # The admin interface to our OAuth2 server.
      - ONS_OAUTH_PROTOCOL=http://                              # This could be overkill, but if we ever chnage the protocol we can do here

      - DEBUG=False
      - TESTING=False
      - CSRF_ENABLED=True
      - SECRET_KEY=this-really-needs-to-be-changed
      - dbname=ras_frontstage_backup
      - SQLALCHEMY_DATABASE_URI=postgresql://ras_party:password@postgres:5432/postgres

      - PARTYSERVICE_PROTOCOL=http://
      - PARTYSERVICE_SERVER=ras-party:5062
      - PARTYSERVICE_REGISTER_ENDPOINT=/respondents/

    restart: always
    depends_on:
      - postgres
    networks:
      - ras

  ras-party:
    build: ${RAS_HOME}/ras-party
    ports:
      - "5162:5062"

    environment:
      - DEBUG=False
      - TESTING=False
      - CSRF_ENABLED=True
      - SECRET_KEY=this-really-needs-to-be-changed
      - dbname=ras_party
      - SQLALCHEMY_DATABASE_URI=postgresql://ras_party:password@postgres:5432/postgres


    networks:
      - ras

  django-oauth2-test:
    build: ${RAS_HOME}/django-oauth2-test
    ports:
      - "8140:8040"
    networks:
      - ras

  ras-collection-instrument:
    build: ${RAS_HOME}/ras-collection-instrument
    ports:
      - "5152:5052"
    environment:
      - OAUTHLIB_INSECURE_TRANSPORT=1                           # Used for development. Allows OAuth2 protocol to work over non TLS protocol
      - APP_SETTINGS=config.Config                              # Allows Flask to load config files

      - DEBUG=False
      - TESTING=False
      - CSRF_ENABLED=True
      - SECRET_KEY=this-really-needs-to-be-changed
      - dbname=ras_collection_instrument
      - SQLALCHEMY_DATABASE_URI=postgresql://ras_collection_instrument:password@postgres:5432/postgres

    networks:
      - ras

  secure-message:
    build: ${RAS_HOME}/ras-secure-message
    environment:
      SECURE_MESSAGING_DATABASE_URL: postgres://ras_secure_message:password@postgres:5432/postgres
      RAS_SM_PATH: ./
      JWT_SECRET: testsecret
      SECURITY_USER_NAME: admin
      SECURITY_USER_PASSWORD: secret
      NOTIFICATION_API_KEY: test_notification_api_key
      NOTIFICATION_TEMPLATE_ID: test_notification_template_id
      SERVICE_ID: test_service_id
    restart: always
    depends_on:
      - postgres 
    networks:
      - ras 
    ports:
      - "5055:5050"

  # Spring config server - not currently used.
  #ras-config:
  #  build:
  #    context: ras-config
  #  environment:
  #    - server.port=8080
  #  networks:
  #    - ras

  # Database container:
  # The defaut port to postgres DB is 5432. However some people have postgres running on their local machine, so we
  # need to change our external port number to map our local port to the docker instance port. We are using 5431 until
  # we here otherwise
  postgres:
    image: postgres:9.6
    ports:
      - "5431:5432"
    networks:
      - ras

networks:
  ras:
